// Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the Microsoft Reciprocal License. See LICENSE.TXT file in the project root for full license information.

namespace Microsoft.Tools.WindowsInstallerXml.Tools {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class LightStrings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal LightStrings() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Tools.WindowsInstallerXml.Tools.LightStrings", typeof(LightStrings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to    -ai        allow identical rows, identical rows will be treated as a warning (deprecated)
        ///   -ad        allow duplicate directory identities from other libraries (deprecated)
        ///   -au        (experimental) allow unresolved references
        ///              (will not create a valid output) (deprecated)
        ///   -b &lt;path&gt;  specify a base path to locate all files
        ///              (default: current directory)
        ///   -bf        bind files into a wixout (only valid with -xo option)
        ///   -binder &lt;classname&gt;  specify a specific custom binder to use provided by
        ///                        an extension
        ///   -cultures:&lt;cultures&gt;  semicolon or comm [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CommandLineArguments {
            get {
                return ResourceManager.GetString("CommandLineArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -bf (bind files) option is only applicable with the -xo option..
        /// </summary>
        internal static string EXP_BindFileOptionNotApplicable {
            get {
                return ResourceManager.GetString("EXP_BindFileOptionNotApplicable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot link object files (.wixobj) files with an output file (.wixout).
        /// </summary>
        internal static string EXP_CannotLinkObjFilesWithOutpuFile {
            get {
                return ResourceManager.GetString("EXP_CannotLinkObjFilesWithOutpuFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  usage:  light.exe [-?] [-b basePath] [-nologo] [-out outputFile] objectFile [objectFile ...] [@responseFile]
        ///
        ///{0}
        ///
        ///Binder arguments:
        ///{1}
        ///
        ///Environment variables:
        ///   WIX_TEMP   overrides the temporary directory used for cab creation, msm exploding, ....
        /// </summary>
        internal static string HelpMessage {
            get {
                return ResourceManager.GetString("HelpMessage", resourceCulture);
            }
        }
    }
}
